package com.teetov.chat.message;

/**
 * Класс содержит константы, изпользуемые в {@code Message}
 *  для управления взаимодействием между клиентом и сервером.
 * 
 * @author  Aleksey Titov
 *
 */
public class MessageProtocol {
	
	/**
	 * Сообщения этого типа предназначены для общения между пользователями.
	 */
	public final static int TEXT = 1;
	
	/**
	 * <p>Сообщения этого типа предназначены для передачи информации, 
	 * необходимой для начала взаимодействия сервери с клиентом и наоборот.
	 * С отправки таких сообщения следует начинать взаимодействие обеим сторонам.</p>
	 * 
	 * <p>Если серверу для подключения требуется пароль,
	 *  ему следует добавить в тело сообщенмя параметр {@code MessageProtocol.REQUIRED_PASSWORD}.</p>
	 */
	public final static int INITIALIZE = 2;
	
	/**
	 * <p>Сообщения этого типа при получения полноценного доступа к серверу.
	 * Получение полноценного доступа клиентом означает, 
	 * что его текстовые сообщения будут отправляться другим подключённым пользователям.</p>
	 * 
	 * <p>Если для подключения к серверу требуется пароль, клиенту следует передать его в теле сообщения.
	 * В ответном сообщении сервер указыват результат проверки возможности подключения - 
	 * {@code MessageProtocol.ACCESSED} или {@code MessageProtocol.DENIED}.</p> 
	 */
	public final static int LOGIN = 3;
	
	/**
	 * <p>Сообщения этого типа предназначены для информирования других пользователей чата 
	 * о том, кто ещё в данный момент подключён к серверу.
	 * В теле сообщения содержится дополнительная информация о статусе пользователя 
	 * или о том, что он вышел из чата.</p>
	 * <p>С целью более точной итендефикаци конкретных пользователей другими клиентами,
	 *  тело сообщения следует начинать с числового значения (id). 
	 *  Id в течении всей сессии для каждого клиента должен быть постоянным.
	 *  Два разных пользователя одновременно не могут быть ассоциированы с одним и тем же id.
	 *  Числовое значение от остального тела сообщения следует отделять символом #;
	 *  Так как id клиента вычислиет и хранит сервер, ему следует преобразовывать статусное сообщение, добавляя id в начало.</p>
	 *  <p>После завершения клиентом соединения, серверу следует отправить от его имени сообщение другим клиентам.
	 *  В теле этого сообщениия следует передать тип статуса {@code StatusList.getExitStustus()}. 
	 *  Таким образом они смогут удалить вышедшего из списка актиных пользователей. </p>
	 *   
	 */
	public final static int STATUS = 4;
	
	/**
	 * Сообщения этого типа предназначены для информирования клиента о состоянии сервера.
	 * Оно отправлется клиентом вместо инииализационного сообщения, если его интересует не подключение к серверу, а получение информаии.
	 * Такой как: находится ли сервер в рабочем состояни, требуется ли для поключения к нему пароль. 
	 * После получения такого сообщения сервер может сразу же закрывать соединение,
	 *  так как интересующая информация уже отправлена сервером в инициализационном сообщении.
	 */
	public final static int TEST = 5;
	
	/**
	 * Сообщения этого типа предназначены для команды обоим сторонам о закрытии соединения между ними.
	 * Соединение следует разрывать после приёма сообщения.
	 */
	public final static int TERMINATE = 6;
	
	
	
	/**
	 * Сервер указывает этот параметр в сообщении типа {@code MessageProtocol.INITIALIZE}, 
	 * если для подключения к нему требуется пароль.
	 */
	public final static String REQUIRED_PASSWORD = "-passwordReq";
	
	/**
	 * Сервер указывает этот параметр в сообщении типа {@code MessageProtocol.LOGIN}, 
	 * если клиент прошёл проверку и получил полноценный доступ.
	 */
	public final static String ACCESSED = "-assessed";
	
	/**
	 * Сервер указывает этот параметр в сообщении типа {@code MessageProtocol.LOGIN}, 
	 * если клиент не прошёл проверку и ему было отказано в доступе.
	 */
	public final static String DENIED = "-denied";
}
